
import javax.swing.DefaultListModel;
import javax.swing.event.ListSelectionListener;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author Spirit
 */
public class Dictionary extends javax.swing.JFrame {

    /**
     * Creates new form Dictionary
     */
    public Dictionary() {
        initComponents();
        setResizable(false);
        infoBox.setEditable(false);
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
        
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        infoBox = new javax.swing.JTextArea();
        jScrollPane2 = new javax.swing.JScrollPane();
        selector = new javax.swing.JList();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Reference");
        setResizable(false);

        infoBox.setEditable(false);
        infoBox.setColumns(20);
        infoBox.setRows(5);
        if (selector.isSelectionEmpty())
        infoBox.setText("    Select one of the categories on the left. Everything is listed\n    in alphabetical order. For a better understanding of each \n    subject here are a few sources to check out.\n\t\n    For information on gender and sexual orientation:\n    http://gender.wikia.com/\n\n    For information on the personality types:\n    http://www.myersbriggs.org/\n    ");
        jScrollPane1.setViewportView(infoBox);

        selector.setModel(new javax.swing.AbstractListModel() {
            String[] strings = {"Information","Gender","Personality Type","Religion","Sexual Orientation"};
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        selector.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                selectorMouseClicked(evt);
            }
        });
        selector.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                selectorValueChanged(evt);
            }
        });
        jScrollPane2.setViewportView(selector);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 360, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 310, Short.MAX_VALUE)
            .addComponent(jScrollPane2)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void selectorMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_selectorMouseClicked
    }//GEN-LAST:event_selectorMouseClicked

    private void selectorValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_selectorValueChanged
        String info = (String)selector.getSelectedValue();
        if (info == "Information")
            infoBox.setText("    Select one of the categories on the left. Everything is listed\n    in alphabetical order. For a better understanding of each \n    subject here are a few sources to check out.\n\t\n    For information on gender and sexual orientation:\n    http://gender.wikia.com/\n\n    For information on the personality types:\n    http://www.myersbriggs.org/\n    ");
        else if (info == "Gender")
            infoBox.setText("   - Androgynous\n\tA person which does not fit neatly \n\tinto the typical masculine or feminine\n\tgender roles. May refer to themselves \n\tas mentally between woman and man, \n\tor genderless.\n   - Agender\n\tA person who do not feel they align \n\twith any gender, or feel a distinct lack \n\tof gender. Some do not associate \n\tthemselves with “he” nor “she”. \n\tInstead “they” is the preferred pronoun. \n   - Bigender\n\tA person who experiences the desire to \n\thave sex traits from two distinct sexes\n \tsimultaneously. Both sexes do not have \n\tto be male and female.\n   - Cisgender\n\tA person whose identity matches the \n\trole or behavior of the appropriate sex.\n   - Gender Fluid\n\tA person who changes their gender \n\tbetween male, female, or any other \n\tidentity. May also have a mix of genders \n\tat the same time.\n   - Neutrois\n\tA person which does not associate with \n\tany of the gender classes.\n   - Pangender\n\tA person who refers to themselves as \n\tmultiple gender identities. Usually \n\tlimited to their own life experience.\n   - Queer Heterosexual\n\tA person who expresses their gender in \n\tnon-traditional ways. A masculine woman \n\tor feminine man.\n   - Transgender\n\tA person born into a body which they do\n \tnot associate with their gender, or who \n\twere assigned a sex that does not match.\n   - Transsexual\n\tA person who transitioned from one sex \n\tto another. Considered to be a subset of\n\ttransgender.\n   - Trigender\n\tA person who identifies between three \n\tdifferent genders. Consists of female, \n\tmale, and nonbinary.\n");
        else if (info == "Sexual Orientation")
            infoBox.setText("   - Asexual\n\tSomeone who lacks the romantic \n\tattraction towards any sex or gender.\n   - Bisexual\n\tSomeone who feels romantic attraction\n\ttowards both males and females.\n   - Demisexual\n\tSomeone who feels romantic attraction\n\ttowards those in which a strong \n\temotional bond has formed.\n   - Heterosexual\n\tSomeone who feels romantic attraction\n\ttowards the opposite sex or gender.\n   - Homosexual\n\tSomeone who feels romantic attraction\n\ttowards the same sex or gender.\n   - Pansexual\n \tSomeone who feels romantic attraction\n\ttowards anyone they connect with \n\tregardless of sex or gender.\n");
        else if (info == "Personality Type")
            infoBox.setText("   - Extraversion (E)\n\tThey’re very talkative and outgoing. They \n\tenjoy working with others on ideas as \n\topposed to working alone.    \n   - Introversion (I)\n\tThey’re reserved and prefers the privacy \n\tof their own mind. They would rather work \n\tin a not so busy environment as oppose to \n\tworking with others.\n   - Sensing (S)\n\tThey look at life in a more realistic view. \n\tThey're more practical and prefer to look \n\tat facts and details over all else. They \n\tdescribe things in a more literal way.\n   - Intuition (N)\n\tThey see life as what could be rather than \n\twhat really is. Instead of looking at small \n\tfacts they look at what the big picture is. \n\tThey describe things in a more figurative \n\tway.\n   - Thinking (T)\n\tThey make decisions through logical \n\treasoning. They enjoy picking at an \n\targument and finding flaws with it. \n\tOverall are reasonable.\n   - Feeling (F)\n\tThey base decisions on personal values \n\tand how it may affect others. They like \n\tto please others and sees the best in \n\tothers. Overall they're empathetic.\n   - Judging (J)\n\tThey believe rules and deadlines are a set \n\tguideline. Detailed step-by-step \n\tinstructions often make their lives easier. \n\tThey enjoy making plans rather than being \n\tsurprised.\n   - Perceiving (P)\n\tThey see rules and deadlines as flexible. \n\tRather than follow a plan they improvise \n\twith whatever they’re doing. They enjoy \n\tbeing surprised over expecting what’s \n\tcoming.\n");
        else if (info == "Religion")
            infoBox.setText("   - Theist\n\tOne who believes in God and may fall\n\tinto any one of many religions.\n   - Atheist\n\tOne who does not believe in God and \n\ttherefore does not fall into a religion.\n   - Agnostic\n\tOne who neither holds the belief of \n\tGod nor is against it as knowledge \n\tfor Him cannot be known. \n   - Gnostic\n\tOne who holds strong beliefs in the \n\tspiritual world and shuns the material \n\tworld.\n   - Deist\n\tOne who believes God created the \n\tworld but is no longer a part of it.\n");
        infoBox.setCaretPosition(0);
    }//GEN-LAST:event_selectorValueChanged
         /**
     * @param args the command line arguments
     */
    
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Dictionary.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Dictionary.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Dictionary.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Dictionary.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Dictionary().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextArea infoBox;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JList selector;
    // End of variables declaration//GEN-END:variables

}
